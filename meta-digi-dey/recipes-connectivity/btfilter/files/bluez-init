#!/bin/sh
#===============================================================================
#
#  bluez
#
#  Copyright (C) 2012-2013 by Digi International Inc.
#  All rights reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License version 2 as published by
#  the Free Software Foundation.
#
#
#  !Description: Configure Bluetooth
#
#===============================================================================

set -e

if [ "${1}" != "start" ]; then
	exit 0
fi

SCRIPTNAME="${0}"

ccardimx28js_bt_init() {
	#
	# Exit if this hardware does not support Bluetooth
	#
	BLUE_TOOTH_VARIANTS="0x02 0x03 0x10 0x11"
	MOD_VARIANT="$(cat /proc/device-tree/digi,hwid,variant 2>/dev/null || \
		       cat /sys/kernel/ccardimx28/mod_variant)"
	if ! echo ${BLUE_TOOTH_VARIANTS} | grep -qs ${MOD_VARIANT}; then
		echo "${SCRIPTNAME}: FAILED (variant ${MOD_VARIANT} does not support bluetooth)"
		exit
	fi

	#
	# Get the Bluetooth MAC address from NVRAM. Use a default value if the
	# address has not been set.
	#
	if [ -f "/proc/device-tree/bluetooth/mac-address" ]; then
		BTADDR="$(hexdump -ve '1/1 "%02X" ":"' /proc/device-tree/bluetooth/mac-address | sed 's/:$//g')"
	else
		BTADDR="$(sed -ne 's,^.*btaddr1=\([^[:blank:]]\+\)[:blank:]*.*,\1,g;T;p' /proc/cmdline)"
	fi
	if [ -z "${BTADDR}" -o "${BTADDR}" = "00:00:00:00:00:00" ]; then
		BTADDR="00:04:F3:FF:FF:BB"
	fi

	#
	# We need to write the Bluetooth MAC address to ar3kbdaddr.pst in
	# the AR3k firmware directory.  However, we don't want to rewrite the
	# file if it already exists and the address is the same because we
	# don't want to wear out NAND flash. So compare the two and only
	# update the copy on NAND if the address has changed.
	#
	FW_MAC="/lib/firmware/ar3k/1020200/ar3kbdaddr.pst"
	[ -f "${FW_MAC}" ] && [ "$(cat ${FW_MAC})" = "${BTADDR}" ] || echo ${BTADDR} > ${FW_MAC}

	BT_CONFIG_FILE="/lib/firmware/ar3k/1020200/PS_ASIC.pst"
	BT_CLASS_1_FILE="/lib/firmware/ar3k/1020200/PS_ASIC_class_1.pst"
	BT_CLASS_2_FILE="/lib/firmware/ar3k/1020200/PS_ASIC_class_2.pst"
	BT_READ_ME="/lib/firmware/ar3k/1020200/readme.txt"
	#
	# It is illegal to operate a class 1 Bluetooth device in Japan.  So see
	# if this is a Japanese unit, and, if so, make sure it is configured
	# for class 2 Bluetooth.
	#
	JAPANESE_REGION_CODE="0x2"
	REGION_CODE="$(cat /proc/device-tree/digi,hwid,cert 2>/dev/null || \
		       cat /sys/kernel/ccardimx28/mod_cert)"
	if [ -n "${REGION_CODE}" -a "${JAPANESE_REGION_CODE}" = "${REGION_CODE}" ]; then
		#
		# We don't want to wear out flash rewriting the configuration file,
		# so only replace the configuration file if it is not the class 2
		# version.
		#
		if ! cmp -s ${BT_CLASS_2_FILE} ${BT_CONFIG_FILE}; then
			ln -sf $(basename ${BT_CLASS_2_FILE}) ${BT_CONFIG_FILE}
		fi
		#
		# We don't want the Bluetooth police to drag away our Japanese
		# users, so delete the class 1 configuration file and the readme
		# file that refers to it.
		#
		rm -f ${BT_CLASS_1_FILE} ${BT_READ_ME}
	elif [ ! -e ${BT_CONFIG_FILE} ]; then
		#
		# Default to class 1 Bluetooth for non-japanese users.
		#
		ln -sf $(basename ${BT_CLASS_1_FILE}) ${BT_CONFIG_FILE}
	fi

	#
	# Start the Bluetooth driver and daemon (D-BUS must already be running)
	#
	HCIATTACH_ARGS="ttyBt ath3k 4000000"
	RETRIES="5"
	while [ "${RETRIES}" -gt "0" ]; do
		hciattach ${HCIATTACH_ARGS} 1>/dev/null && break
		#
		# If hciattach fails try to recover it by toggling the GPIO
		#
		BT_PWR_L="/sys/class/gpio/gpio21"
		[ -d "${BT_PWR_L}" ] || echo -n 21 > /sys/class/gpio/export
		echo -n out > ${BT_PWR_L}/direction && sleep .2
		echo -n 0 > ${BT_PWR_L}/value && sleep .2
		echo -n 1 > ${BT_PWR_L}/value && sleep .2
		[ -d "${BT_PWR_L}" ] && echo -n 21 > /sys/class/gpio/unexport
		RETRIES="$((RETRIES - 1))"
	done
	if [ "${RETRIES}" -eq "0" ]; then
		echo "${SCRIPTNAME}: FAILED (hciattach)"
		exit
	fi
	BT_FILTER_ARGS="-b -x -s -w wlan0"
	if ! abtfilt ${BT_FILTER_ARGS} 1>/dev/null; then
		echo "${SCRIPTNAME}: FAILED (abtfilt)"
		exit
	fi
}

echo "Starting bluetooth services."

# Initialize driver for 'ccardimx28js'
MACHINENAME="$(cat /proc/device-tree/digi,machine,name 2>/dev/null || cat /sys/kernel/machine/name)"
[ "${MACHINENAME}" = "ccardimx28" ] && ccardimx28js_bt_init

# Run bluetooth daemon
if hciconfig hci0 up && bluetoothd; then
	:	# No-op
else
	echo "${SCRIPTNAME}: FAILED"
fi
