From: Pedro Perez de Heredia <pedro.perez@digi.com>
Date: Mon, 13 Feb 2017 09:43:50 +0100
Subject: [PATCH] kernel-module-qualcomm: cosmetic change log level for anoying
 driver messages

Signed-off-by: Pedro Perez de Heredia <pedro.perez@digi.com>
---
 CORE/SERVICES/HIF/sdio/linux/native_sdio/src/hif.c | 4 ++--
 CORE/SVC/src/logging/wlan_logging_sock_svc.c       | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/CORE/SERVICES/HIF/sdio/linux/native_sdio/src/hif.c b/CORE/SERVICES/HIF/sdio/linux/native_sdio/src/hif.c
index 1a1e51e..ee2af05 100644
--- a/CORE/SERVICES/HIF/sdio/linux/native_sdio/src/hif.c
+++ b/CORE/SERVICES/HIF/sdio/linux/native_sdio/src/hif.c
@@ -1202,7 +1202,7 @@ TODO: MMC SDIO3.0 Setting should also be modified in ReInit() function when Powe
                 clock = device->host->f_max;
             }

-            printk(KERN_ERR "%s: Dumping clocks (%d,%d)\n", __func__, func->card->cis.max_dtr, device->host->f_max);
+            pr_info("%s: Dumping clocks (%d,%d)\n", __func__, func->card->cis.max_dtr, device->host->f_max);

 /*
 //          We don't need to set the clock explicitly on 8064/ADP platforms.
@@ -1513,7 +1513,7 @@ static A_STATUS hifEnableFunc(HIF_DEVICE *device, struct sdio_func *func)
                 sdio_release_host(func);
                 return A_ERROR;
             }
-            printk(KERN_ERR"AR6000: Set async interrupt delay clock as %d.\n", asyncintdelay);
+            pr_info("AR6000: Set async interrupt delay clock as %d.\n", asyncintdelay);
         }

 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,27)
diff --git a/CORE/SVC/src/logging/wlan_logging_sock_svc.c b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
index 0253215..379d878 100644
--- a/CORE/SVC/src/logging/wlan_logging_sock_svc.c
+++ b/CORE/SVC/src/logging/wlan_logging_sock_svc.c
@@ -431,13 +431,13 @@ static int wlan_logging_thread(void *Arg)
 		  || gwlan_logging.exit));

 		if (ret_wait_status == -ERESTARTSYS) {
-			pr_err("%s: wait_event_interruptible returned -ERESTARTSYS",
+			pr_info("%s: wait_event_interruptible returned -ERESTARTSYS",
 				__func__);
 			break;
 		}

 		if (gwlan_logging.exit) {
-			pr_err("%s: Exiting the thread\n", __func__);
+			pr_info("%s: Exiting the thread\n", __func__);
 			break;
 		}

